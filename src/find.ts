import { config } from ".";
import { getToken } from "./auth";
import { axiosMasterMain } from "axios-master";
import { AxiosResponse } from "axios";

type ApiResponse<T> = {
  code: string;
  success: boolean;
  message: string;
  token?: string;
  data: T;
};
type UserT = {
  _id?: string; // Mongoose default `_id` type
  user_id?: number; // Numerical identifier for the user
  user_name?: string; // User's unique username
  nick_name?: string; // User's nickname
  exp?: number; // Experience points or similar metric for the user
  primary_email?: string; // Primary email for login and communication
  primary_phone?: string; // Primary phone for login and communication
  emails?: Array<{
    email: string;
    verified: boolean;
    primary: boolean;
  }>;
  phone_numbers?: Array<{
    number: string;
    verified: boolean;
    primary: boolean;
  }>;
  auth_profiles?: {
    facebook_id?: string;
    google_id?: string;
    steam_id?: string;
    apple_id?: string;
    twitter_id?: string;
    monpay_id?: string;
    toki_id?: string;
    social_id?: string;
    hipay_id?: string;
    digi_id?: string;
  };
  profile_image_url?: string; // URL to the user's avatar
  date_of_birth?: Date; // User's date of birth
  gender?: "MEN" | "WOMEN"; // User's gender
  sign_up_date?: Date; // Date when the user created their account
  last_login?: Date; // Last login date
  wallet_id?: string; // Identifier for the user's wallet
  wallet_key?: string; // Security key for the user's wallet
  preferences?: {
    language?: string;
    notifications?: boolean;
  };
  status?: {
    is_active?: boolean;
    is_banned?: boolean;
    verified?: boolean;
  };
  security?: {
    password_hash?: string;
    two_factor_enabled?: boolean;
    last_password_change?: Date;
  };
  verify_info?: {
    first_name?: string;
    last_name?: string;
    born_date?: Date;
    national_id?: string;
  };
  dynamic_info?: {
    [key: string]: any;
  };
  apps?: {
    app_name: string;
    app_id: string;
    device_id: string;
  }[];
  createdAt?: Date;
  updatedAt?: Date;
};
type MerchantT = {
  _id?: string;
  user_id: number;
  user_name?: string;
  phone_number?: string; // Stored as string to prevent issues with leading zeros
  user_role?: "merchant" | "sub-merchant";
  avatar?: string;
  authority?: string[];
  user_email?: string;
  password?: string;
  show_router?: string[];
  show_id?: string[];
  merchant: {
    toki_id: string;
    hipay: string;
  };
  wallet_id?: string;
  wallet_key?: string;
  delFlg?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
};
type AdminT = {
  _id?: string;
  user_id?: number;
  user_name?: string;
  phone_number?: number;
  user_role?: "admin" | "sub-admin" | "super-admin";
  avatar?: string;
  authority?: string[];
  user_email?: string;
  password?: string;
  show_router?: string[];
  show_id?: string[];
  delFlg?: boolean;
  createdAt?: Date; // Automatically generated by Mongoose with timestamps
  updatedAt?: Date; // Automatically generated by Mongoose with timestamps
};
type ClientT = {
  _id?: string;
  user_id?: number;
  user_name?: string;
  phone_number?: number;
  user_role?: "crm" | "sub-crm";
  avatar?: string;
  authority?: string[];
  user_email?: string;
  password?: string;
  show_router?: string[];
  show_id?: string[];
  RefundFun?: boolean;
  delFlg?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
};
type CrmT = {
  _id?: string;
  user_id?: number;
  user_name?: string;
  phone_number?: number;
  user_role?: "crm" | "sub-crm";
  avatar?: string;
  authority?: string[];
  user_email?: string;
  password?: string;
  show_router?: string[];
  show_id?: string[];
  RefundFun?: boolean;
  delFlg?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
};
export const USER = async (
  body: UserT,
): Promise<{ success: boolean; data: UserT[]; message: string }> => {
  try {
    const result: ApiResponse<null> = await axiosMasterMain(
      {
        method: "POST",
        maxBodyLength: Infinity,
        url: `${config.hosts.MAIN}/main/v1/auth/support/find/user`,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
        },
        data: body,
      },
      {
        name: "support/find/user",
        timeout: 20000,
        retryFunction: getToken,
        shouldRetry: true,
        shouldRetryStatus: [401, 400],
        logger(data) {
          if (config.logger) {
            console.log(data.json);
          }
        },
      },
    );

    return { success: true, data: result.data, message: result.message };
  } catch (error) {
    const axiosError = error as AxiosResponse<ApiResponse<{}>>;
    if (axiosError.data) {
      console.log(axiosError.data);
    } else {
      console.error("Request Failed:", axiosError);
    }
    return {
      success: false,
      data: null,
      message: axiosError.data?.message || "",
    };
  }
};
export const MERCHANT = async (
  body: MerchantT,
): Promise<{ success: boolean; data: MerchantT[]; message: string }> => {
  try {
    const result: ApiResponse<null> = await axiosMasterMain(
      {
        method: "POST",
        maxBodyLength: Infinity,
        url: `${config.hosts.MAIN}/main/v1/auth/support/find/merchant`,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
        },
        data: body,
      },
      {
        name: "support/find/merchant",
        timeout: 20000,
        retryFunction: getToken,
        shouldRetry: true,
        shouldRetryStatus: [401, 400],
        logger(data) {
          if (config.logger) {
            console.log(data.json);
          }
        },
      },
    );

    return { success: true, data: result.data, message: result.message };
  } catch (error) {
    const axiosError = error as AxiosResponse<ApiResponse<{}>>;
    if (axiosError.data) {
      console.log(axiosError.data);
    } else {
      console.error("Request Failed:", axiosError);
    }
    return {
      success: false,
      data: null,
      message: axiosError.data?.message || "",
    };
  }
};
export const ADMIN = async (
  body: AdminT,
): Promise<{ success: boolean; data: AdminT[]; message: string }> => {
  try {
    const result: ApiResponse<null> = await axiosMasterMain(
      {
        method: "POST",
        maxBodyLength: Infinity,
        url: `${config.hosts.MAIN}/main/v1/auth/support/find/admin`,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
        },
        data: body,
      },
      {
        name: "support/find/admin",
        timeout: 20000,
        retryFunction: getToken,
        shouldRetry: true,
        shouldRetryStatus: [401, 400],
        logger(data) {
          if (config.logger) {
            console.log(data.json);
          }
        },
      },
    );

    return { success: true, data: result.data, message: result.message };
  } catch (error) {
    const axiosError = error as AxiosResponse<ApiResponse<{}>>;
    if (axiosError.data) {
      console.log(axiosError.data);
    } else {
      console.error("Request Failed:", axiosError);
    }
    return {
      success: false,
      data: null,
      message: axiosError.data?.message || "",
    };
  }
};
export const CLIENT = async (
  body: ClientT,
): Promise<{ success: boolean; data: ClientT[]; message: string }> => {
  try {
    const result: ApiResponse<null> = await axiosMasterMain(
      {
        method: "POST",
        maxBodyLength: Infinity,
        url: `${config.hosts.MAIN}/main/v1/auth/support/find/client`,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
        },
        data: body,
      },
      {
        name: "support/find/client",
        timeout: 20000,
        retryFunction: getToken,
        shouldRetry: true,
        shouldRetryStatus: [401, 400],
        logger(data) {
          if (config.logger) {
            console.log(data.json);
          }
        },
      },
    );

    return { success: true, data: result.data, message: result.message };
  } catch (error) {
    const axiosError = error as AxiosResponse<ApiResponse<{}>>;
    if (axiosError.data) {
      console.log(axiosError.data);
    } else {
      console.error("Request Failed:", axiosError);
    }
    return {
      success: false,
      data: null,
      message: axiosError.data?.message || "",
    };
  }
};
export const CRM = async (
  body: CrmT,
): Promise<{ success: boolean; data: CrmT[]; message: string }> => {
  try {
    const result: ApiResponse<null> = await axiosMasterMain(
      {
        method: "POST",
        maxBodyLength: Infinity,
        url: `${config.hosts.MAIN}/main/v1/auth/support/find/crm`,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
        },
        data: body,
      },
      {
        name: "support/find/crm",
        timeout: 20000,
        retryFunction: getToken,
        shouldRetry: true,
        shouldRetryStatus: [401, 400],
        logger(data) {
          if (config.logger) {
            console.log(data.json);
          }
        },
      },
    );

    return { success: true, data: result.data, message: result.message };
  } catch (error) {
    const axiosError = error as AxiosResponse<ApiResponse<{}>>;
    if (axiosError.data) {
      console.log(axiosError.data);
    } else {
      console.error("Request Failed:", axiosError);
    }
    return {
      success: false,
      data: null,
      message: axiosError.data?.message || "",
    };
  }
};
export default { USER, MERCHANT, ADMIN, CLIENT, CRM };
